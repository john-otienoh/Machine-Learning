# -*- coding: utf-8 -*-
"""Malaria Prediction In Kenya.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1rcbpWM8JZyRLFuQPjpliV7fvxmI-ZIkb

# **Malaria Prediction dataset in Kenya**
"""

import pandas as pd
import numpy as np
from matplotlib import pyplot as plt
import seaborn as sns

# Upload the dataset.
data = pd.read_csv("/content/Kenya Malaria_Prediction Dataset by who.csv")

"""## Dataset Inspection
Helps us gain insight of the dataset
"""

# Display top 5 rows.
data.head()

# Display last 5 rows.
data.tail()

# Display index, columns and rows
data.info()

# Display data types.
data.dtypes

# Display Number of rows and columns
data.shape

# Summary statistics
data.describe()

"""## Data Cleaning"""

# Missing Values
data.isnull().sum()

# Drop missing values
cleaned_data = data.dropna()

# Verify for any missing values
cleaned_data.isnull().sum()

"""## Analysis and Visualization

1. Gender Distribution
"""

gender = cleaned_data['Gender'].value_counts()
plt.xlabel('Gender')
plt.ylabel('Number of Cases')
plt.title('Gender Distribution')
plt.bar(gender.index, gender.values)
plt.show()

"""2. Region Distribution"""

region = cleaned_data['Region'].value_counts()
plt.xlabel('Region')
plt.ylabel('Number of Cases')
plt.title('Region Distribution')
plt.bar(region.index, region.values)
plt.show()

"""3. Diagnosis Results"""

diagnosis = cleaned_data['Diagnosis'].value_counts()
plt.xlabel('Diagnosis')
plt.ylabel('Number of Cases')
plt.title('Diagnosis Results')
plt.bar(diagnosis.index, diagnosis.values)
plt.show()

"""4. Parasite Detection"""

# parasite_present = (cleaned_data['Parasite Detected'] == 'Yes').sum()
parasite = cleaned_data['Parasite Detected'].value_counts()
plt.xlabel('Parasite Detected')
plt.ylabel('Number of Cases')
plt.title('Parasite Detection')
plt.bar(parasite.index, parasite.values)
plt.show()

"""5. Age distribution
- Top 10 Ages
"""

age = cleaned_data['Age'].value_counts().head(10)
plt.title('Age Distribution - Top 10')
plt.xlabel('Age')
plt.ylabel('Count')
plt.bar(age.index.astype(str), age.values, color='skyblue')
plt.show()

"""- Bottom 10 ages."""

age = cleaned_data['Age'].value_counts().tail(10)
plt.title('Age Distribution - Bottom 10')
plt.xlabel('Age')
plt.ylabel('Count')
plt.bar(age.index.astype(str), age.values, color='skyblue')
plt.show()

"""- Random 10 ages."""

age = cleaned_data['Age'].value_counts().sample(n=10, random_state=1)
plt.title('Age Distribution (Random 10 Ages)')
plt.xlabel('Age')
plt.ylabel('Count')
plt.bar(age.index.astype(str), age.values, color='skyblue')
plt.show()

"""6. Fever Count"""

fever = cleaned_data['Fever'].value_counts()
plt.xlabel('Fever')
plt.ylabel('Number of Cases')
plt.title('Fever Count')
plt.bar(fever.index, fever.values)
plt.show()

"""7. Headache Count"""

headache = cleaned_data['Headache'].value_counts()
plt.xlabel('Headache')
plt.ylabel('Number of Cases')
plt.title('Headache Counts')
plt.bar(headache.index, headache.values)
plt.show()

"""8. Chills Count"""

chills = cleaned_data['Chills'].value_counts()
plt.xlabel('Chills')
plt.ylabel('Number of Cases')
plt.title('Chills Count')
plt.bar(chills.index, chills.values)
plt.show()

"""9. Sweat Count"""

sweats = cleaned_data['Sweats'].value_counts()
plt.xlabel('Sweats')
plt.ylabel('Number of Cases')
plt.title('Sweats Count')
plt.bar(sweats.index, sweats.values)
plt.show()

"""10. Fatigue Count"""

fatigue = cleaned_data['Fatigue'].value_counts()
plt.xlabel('Fatigue')
plt.ylabel('Number of Cases')
plt.title('Fatigue Count')
plt.bar(fatigue.index, fatigue.values)
plt.show()

"""11. Hemoglobin Levels
- Top 10
"""

hemeglobin = cleaned_data['Hemoglobin (g/dL)'].value_counts().head(10)
plt.xlabel('Hemoglobin (g/dL)')
plt.ylabel('Number of Cases')
plt.title('Hemoglobin Levels - Top 10')
plt.bar(hemeglobin.index.astype(str), hemeglobin.values, color='skyblue')
plt.show()

"""- Bottom 10"""

hemeglobin = cleaned_data['Hemoglobin (g/dL)'].value_counts().tail(10)
plt.xlabel('Hemoglobin (g/dL)')
plt.ylabel('Number of Cases')
plt.title('Hemoglobin Levels - Bottom 10')
plt.bar(hemeglobin.index.astype(str), hemeglobin.values, color='skyblue')
plt.show()

"""- Random 10"""

hemeglobin = cleaned_data['Hemoglobin (g/dL)'].value_counts().sample(10)
plt.xlabel('Hemoglobin (g/dL)')
plt.ylabel('Number of Cases')
plt.title('Hemoglobin Levels Random 10 values')
plt.bar(hemeglobin.index.astype(str), hemeglobin.values, color='skyblue')
plt.show()
